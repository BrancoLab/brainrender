name: tests

on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: neuroinformatics-unit/actions/lint@v2

  test:
    needs: [linting]
    name: ${{ matrix.os }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Run all supported Python versions on linux
        python-version: ["3.9", "3.10", "3.11"]
        os: [ubuntu-latest]
        # Include one windows and macos run
        include:
        - os: macos-latest
          python-version: "3.11"
        - os: windows-latest
          python-version: "3.11"

    steps:
      - name: Install hdf5 libs for Mac
        if: runner.os == 'macOS'
        run: brew install hdf5

      # Helps set up VTK with a headless display
      - uses: pyvista/setup-headless-display-action@v2

      # Sets up ffmpeg to we can run video tests on CI
      - uses: FedericoCarboni/setup-ffmpeg@v2
        id: setup-ffmpeg

      # Run tests
      - uses: neuroinformatics-unit/actions/test@v2
        if: runner.os != 'Windows'
        with:
          python-version: ${{ matrix.python-version }}

      # Windows custom steps
      - name: Setup Conda on Windows
        if: runner.os == 'Windows'
        uses: s-weigand/setup-conda@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Change Conda solver and install Pyside2
        if: runner.os == 'Windows'
        run: |
          conda config --set solver libmamba
          conda install -c conda-forge pyside2 --yes

      - uses: actions/checkout@v3
        if: runner.os == 'Windows'

      - name: Install tox
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox tox-gh-actions

      - name: Run tests
        if: runner.os == 'Windows'
        run: tox

      - name: Report coverage to codecov
        if: runner.os == 'Windows'
        uses: codecov/codecov-action@v3

  build_sdist_wheels:
    name: Build source distribution
    needs: [test]
    if: github.event_name == 'push' && github.ref_type == 'tag'
    runs-on: ubuntu-latest
    steps:
    - uses: neuroinformatics-unit/actions/build_sdist_wheels@v2


  upload_all:
    name: Publish build distributions
    needs: [build_sdist_wheels]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: artifact
        path: dist
    - uses: pypa/gh-action-pypi-publish@v1.5.0
      with:
        user: __token__
        password: ${{ secrets.TWINE_API_KEY }}
